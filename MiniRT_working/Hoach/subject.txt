The miniRT project is an introduction to ray tracing and computer-generated imagery (CGI), using a simplified ray tracer written in C. It utilizes miniLibX, a small library used to create windows and render images, often used in 42 school's projects for graphical outputs.

Here’s a summary of how the project works, along with key instructions and requirements:

Project Structure:
I. Introduction to Ray Tracing:
Ray tracing is a rendering technique that simulates how light interacts with objects to produce photorealistic images. Although computationally expensive, it can yield high-quality results compared to rasterization (the method used by most game engines).

Objective: You will implement basic ray tracing features, like rendering spheres, planes, and cylinders. You will also handle object transformations (translations, rotations) and lighting (ambient and diffuse).
End Goal: A program that generates a 3D image scene from a description file and displays it in a window using miniLibX.
II. Common Instructions:
Programming Language: The project must be written in C, adhering to the 42 Norm.
Memory Management: Ensure no memory leaks or segmentation faults. Properly free all heap-allocated memory.
Makefile: Create a Makefile that will compile the program with -Wall, -Wextra, and -Werror flags. Include rules for all, clean, fclean, re, and bonus (if applicable).
Libraries Allowed:
miniLibX: For creating the graphical window.
Math library (-lm): For geometric calculations.
Libft: If allowed, you may use your custom library (libft).
Functionality: Handle window resizing, object transformations, and implement basic lighting models (ambient and diffuse).
Exit/Errors: The program must exit cleanly when ESC is pressed or the window is closed. Handle errors with explicit messages: "Error\n" followed by a description.
III. Mandatory Part – miniRT:
Program Description:
Your program must generate images using ray tracing. It must be able to parse a scene description file, process the elements in the scene, and render them in a window.

Scene Elements:

Ambient Lighting (A):
A <ratio> <R,G,B>
Example: A 0.2 255,255,255

Camera (C):
C <x,y,z> <dir_x, dir_y, dir_z> <FOV>
Example: C -50.0,0,20 0,0,1 70

Light (L):
L <x,y,z> <brightness> <R,G,B>
Example: L -40.0,50.0,30.0 0.7 255,255,255

Sphere (sp):
sp <x,y,z> <diameter> <R,G,B>
Example: sp 0.0,0.0,20.6 12.6 255,0,0

Plane (pl):
pl <x,y,z> <normal_x, normal_y, normal_z> <R,G,B>
Example: pl 0.0,0.0,-10.0 0.0,1.0,0.0 0,0,225

Cylinder (cy):
cy <x,y,z> <axis_x, axis_y, axis_z> <diameter> <height> <R,G,B>
Example: cy 50.0,0.0,20.6 0.0,0.0,1.0 14.2 21.42 10,0,255

File Format (.rt):
Each element starts with an identifier (A, C, L, sp, pl, cy).
Followed by the specific information (coordinates, diameter, color, etc.).
The scene description file may contain multiple elements in any order, but only one of each type (e.g., one camera, one ambient light).
Example Scene (Minimal):

txt
Copy code
A 0.2 255,255,255
C -50,0,20 0,0,1 70
L -40,0,30 0.7 255,255,255
pl 0,0,0 0,1.0,0 255,0,225
sp 0,0,20 20 255,0,0
cy 50.0,0.0,20.6 0,0,1.0 14.2 21.42 10,0,255
IV. Bonus Part (Optional):
If the mandatory part works perfectly, you can implement bonuses such as:

Reflection: Add specular reflection for a more realistic rendering.
Checkerboard: Add a checkerboard texture to objects.
Multiple Lights: Add support for multiple light sources or colored lights.
Additional 2nd-degree Objects: Implement cones, hyperboloids, etc.
Bump Mapping: Implement texture mapping for more complex surfaces.
Note: Bonuses will only be considered if your mandatory part is perfect.

V. Example Scenes:
The examples provided show how different objects and lighting can be combined to create a scene. Here are a few visual concepts:

A sphere with one light source and basic shine
A cylinder with lighting
A scene with a cone, a plane, and a spot light
Multiple spotlights and reflections for more complex lighting
A checkered sphere with shine, multiple lights, and shadows
VI. Submission and Peer-Evaluation:
Git Repository: Submit your code to your Git repository, ensuring all files are correctly named.
Defense: During defense, you may use your tests or the tests from peers to demonstrate your project functionality.
Bonus: If you implement bonuses, they should be in a separate file (_bonus.c/h) and will be evaluated separately.
Key Takeaways:
miniRT is about learning the basics of ray tracing and rendering.
It involves understanding transformations, intersections, lighting, and managing resources effectively.
Using miniLibX for graphics and C for mathematical processing is key to implementing the project.
Bonuses allow you to enhance the ray tracer but are optional and evaluated separately.



miniRT/
├── Makefile                 # Makefile for compiling the project
├── includes/                # Header files (structs, prototypes, etc.)
│   ├── miniRT.h             # Main header file with declarations for structs and functions
│   ├── object.h             # Structs and functions related to objects (sphere, plane, cylinder, etc.)
│   ├── light.h              # Light object definitions and functions
│   ├── vector.h             # Math functions for vectors (dot, cross, normalization)
│   ├── matrix.h             # Matrix operations for object transformations (if needed)
│   └── ray.h                # Ray-related structs and functions (origin, direction, intersection tests)
├── srcs/                    # Source files (implementations of functions)
│   ├── main.c               # Entry point of the program, initializes the program and the window
│   ├── parse.c              # Parsing the .rt scene file and creating objects
│   ├── raytrace.c           # Core ray tracing logic (intersections, reflections, lighting)
│   ├── render.c             # Rendering the image to the window
│   ├── transform.c          # Object transformation (rotation, translation)
│   ├── lighting.c           # Lighting calculations (ambient, diffuse, spot)
│   └── utils.c              # Utility functions (error handling, memory management, etc.)
├── scenes/                  # Sample scene files (.rt files)
│   ├── basic_scene.rt       # Example of a simple scene with a sphere, light, and camera
│   └── advanced_scene.rt    # Example of a more complex scene with multiple objects, lights, and transformations
└── libft/                   # Your own libft implementation (if allowed)
    ├── Makefile             # Makefile to compile libft
    ├── ft_printf.c          # Custom printf
    ├── ft_memcpy.c          # Custom memory functions (memset, memcpy, etc.)
    └── ...                  # Other functions you implement for memory handling, strings, etc.



